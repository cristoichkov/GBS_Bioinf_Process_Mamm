install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(ggplot2)
library(dplyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
citation(ggplot())
citation(ggplot)
citation("ggplot2")
ggplot2
ggplot
sessionInfo()
install.packages("ggExtra")
install.packages("argparse")
sum(1,2,3)
prod
prod(1,4)
prod(5,4)
typeof(1)
typeof(10.4)
typeof(1l)
typeof(1L)
1L
typeof(casa)
typeof("casa")
1L + 4L
1 + 4
class(4.5)
class(4)
typeof(4L)
typeof(4.4L)
typeof(5)
typeof("skull")
?order
x[c(1, 3, 5)]
x = c(10, 20, 30, 20, 20, 25, 9, 26)
sum(x==20)
x==20
z = seq(1, 5, length.out = 6)
z
z = seq(1, 5, length.out = 6)
z
seq(20, 40, by=2)
letras <- c("aa", "bb", "cc", "dd", "ee", "ff", "gg", "hh")
new <- seq(20, 40, by=2)
c(new, letras)
gg <- c(new, letras)
typeof(gg)
class(gg)
x < matrix(1:12, 3, 4)
x < matrix(1:12, 3, 4)
x <- matrix(1:12, 3, 4)
vec <- sample(1:20,15,replace = F)
matrix(vec, 5, 3)
mat <- matrix(vec, 5, 3)
mat_new <- mat[c(2,5), c(3)]
mat_new
mat_new <- mat[-3,-3]
mat_new
mat
colnames(mat) <- c("A", "B", "C")
mat
rownames(mat) <- c("Z", "X", "W", "Y", "S")
mat
vex <- c(2,4,7,2,5)
cbind(mat, vex)
vez <- c(6,4,6)
cbind(mat, vez)
rbind(mat, vez)
vec_1 <- c(1,2,3,4)
vec_2 <- c(5,6,7,8)
rbind(vec_1, vec_2)
setwd("~/Stoich_repos/GBS_Bioinf_Process_Mamm/bin")
## function to extract a list of nodes and its tip labels from a tree
source("extract_nodes_tips.R")
## vector with your nodes
nodes <- c(146, 144, 118, 132, 134, 137, 139, 115, 83, 84, 113, 92, 97, 103, 106)
## extract a list of nodes and its tip labels from a tree
nodes_tree <- extract_nodes_tips("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20", all_nodes = FALSE, nodes = nodes)
## convert nodes to dataframe
nodes_tree$node <- factor(nodes_tree$node)
## loop to change the names of tips in the file nodes tree
for (i in 1:nrow(names)){
x <- names[i,1]
y <- names[i,2]
for (n in 1:nrow(nodes_tree)){
if (nodes_tree[n,1] == x){
nodes_tree[n,1] <- y
}
}
}
## loop to split the samples according of their nodes and put them in a list
cls_lst <- list()
for (w in 1:length(levels(nodes_tree[,2]))){
Cw <- nodes_tree %>% filter(node == levels(nodes_tree[,2])[w])
Cw <- as.vector(Cw[,1])
cls_lst[[w]] <- Cw
}
## loop to change the names of tips in the file nodes tree
for (i in 1:nrow(names)){
x <- names[i,1]
y <- names[i,2]
for (n in 1:nrow(nodes_tree)){
if (nodes_tree[n,1] == x){
nodes_tree[n,1] <- y
}
}
}
## loop to change the names of tips in the file nodes tree
for (i in 1:nrow(names)){
x <- names[i,1]
y <- names[i,2]
for (n in 1:nrow(nodes_tree)){
if (nodes_tree[n,1] == x){
nodes_tree[n,1] <- y
}
}
}
## Read the file with the mammillarias name
names <- read.csv("../meta/Mamm_names.csv", header = FALSE, sep = "\t")
## loop to change the names of tips in the file nodes tree
for (i in 1:nrow(names)){
x <- names[i,1]
y <- names[i,2]
for (n in 1:nrow(nodes_tree)){
if (nodes_tree[n,1] == x){
nodes_tree[n,1] <- y
}
}
}
for (w in 1:length(levels(nodes_tree[,2]))){
Cw <- nodes_tree %>% filter(node == levels(nodes_tree[,2])[w])
Cw <- as.vector(Cw[,1])
cls_lst[[w]] <- Cw
}
## loop to split the samples according of their nodes and put them in a list
cls_lst <- list()
for (w in 1:length(levels(nodes_tree[,2]))){
Cw <- nodes_tree %>% filter(node == levels(nodes_tree[,2])[w])
Cw <- as.vector(Cw[,1])
cls_lst[[w]] <- Cw
}
View(cls_lst)
library(ggtree)
library(ape)
library(treeio)
library(colorspace)
library(MoreTreeTools)
library(doMC)
library(dplyr)
library(ggExtra)
library(tidyr)
## function to extract a list of nodes and its tip labels from a tree
source("extract_nodes_tips.R")
## vector with your nodes
nodes <- c(146, 144, 118, 132, 134, 137, 139, 115, 83, 84, 113, 92, 97, 103, 106)
## extract a list of nodes and its tip labels from a tree
nodes_tree <- extract_nodes_tips("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20", all_nodes = FALSE, nodes = nodes)
## convert nodes to dataframe
nodes_tree$node <- factor(nodes_tree$node)
## Read the file with the mammillarias name
names <- read.csv("../meta/Mamm_names.csv", header = FALSE, sep = "\t")
## loop to change the names of tips in the file nodes tree
for (i in 1:nrow(names)){
x <- names[i,1]
y <- names[i,2]
for (n in 1:nrow(nodes_tree)){
if (nodes_tree[n,1] == x){
nodes_tree[n,1] <- y
}
}
}
cls_lst <- list()
for (w in 1:length(levels(nodes_tree[,2]))){
Cw <- nodes_tree %>% filter(node == levels(nodes_tree[,2])[w])
Cw <- as.vector(Cw[,1])
cls_lst[[w]] <- Cw
}
tree_1 <- read.raxml("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20")
names <- read.csv("../meta/Mamm_names.csv", header = FALSE, sep = "\t")
tree_1 <-  rename_taxa(tree_1, names, V1, V2)
ggtree(tree_1) + geom_tiplab() + geom_label2(aes(label = node), size = 3) + geom_rootpoint()
ggtree(tree_1) + geom_tiplab() + geom_label2(aes(label = bootstrap), size = 3) + geom_rootpoint()
tree_1 <- groupOTU(tree_1, cls_lst)
p1 <- ggtree(tree_1) + geom_tiplab(aes(color=group)) +
geom_text(aes(label=bootstrap/100), col = "black", size = 3, nudge_x = -0.00015,  nudge_y = 0.7) +
theme_tree2() +
geom_vline(xintercept = 0.0165, linetype="dashed", size = 0.6)
p1
View(nodes_tree)
View(names)
View(p1)
## vector with your nodes
nodes <- c(128, 139, 122, 116, 114, 144, 109, 95, 85, 93, 83, 77)
## vector with your nodes
nodes <- c(128, 139, 122, 116, 114, 144, 109, 95, 85, 93, 83, 77)
## vector with your nodes
nodes <- c(128, 139, 122, 116, 114, 144, 109, 95, 85, 93, 83, 77)
## extract a list of nodes and its tip labels from a tree
nodes_tree <- extract_nodes_tips("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20", all_nodes = FALSE, nodes = nodes)
## function to extract a list of nodes and its tip labels from a tree
source("extract_nodes_tips.R")
## extract a list of nodes and its tip labels from a tree
nodes_tree <- extract_nodes_tips("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20", all_nodes = FALSE, nodes = nodes)
## loop to split the samples according of their nodes and put them in a list
cls_lst <- list()
for (w in 1:length(levels(nodes_tree[,2]))){
Cw <- nodes_tree %>% filter(node == levels(nodes_tree[,2])[w])
Cw <- as.vector(Cw[,1])
cls_lst[[w]] <- Cw
}
View(nodes_tree)
tree_1 <- groupOTU(tree_1, cls_lst)
tree_1 <- read.raxml("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20")
tree_1 <- groupOTU(tree_1, cls_lst)
p1 <- ggtree(tree_1) + geom_tiplab(aes(color=group)) +
geom_text(aes(label=bootstrap/100), col = "black", size = 3, nudge_x = -0.00015,  nudge_y = 0.7) +
theme_tree2() +
geom_vline(xintercept = 0.0165, linetype="dashed", size = 0.6)
p1
p1 <- ggtree(tree_1) + geom_tiplab(aes(color=group)) +
geom_text(aes(label=bootstrap/100), col = "black", size = 3, nudge_x = -0.00015,  nudge_y = 0.7) +
theme_tree2() +
geom_vline(xintercept = 0.0165, linetype="dashed", size = 0.6)
p1
tree_1 <- groupOTU(tree_1, cls_lst)
p1 <- ggtree(tree_1) + geom_tiplab(aes(color=group)) +
geom_text(aes(label=bootstrap/100), col = "black", size = 3, nudge_x = -0.00015,  nudge_y = 0.7) +
theme_tree2() +
geom_vline(xintercept = 0.0165, linetype="dashed", size = 0.6)
p1
for (w in 1:length(levels(nodes_tree[,2]))){
Cw <- nodes_tree %>% filter(node == levels(nodes_tree[,2])[w])
Cw <- as.vector(Cw[,1])
cls_lst[[w]] <- Cw
}
## convert nodes to dataframe
nodes_tree$node <- factor(nodes_tree$node)
for (w in 1:length(levels(nodes_tree[,2]))){
Cw <- nodes_tree %>% filter(node == levels(nodes_tree[,2])[w])
Cw <- as.vector(Cw[,1])
cls_lst[[w]] <- Cw
}
tree_1 <- read.raxml("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20")
tree_1 <- groupOTU(tree_1, cls_lst)
p1 <- ggtree(tree_1) + geom_tiplab(aes(color=group)) +
geom_text(aes(label=bootstrap/100), col = "black", size = 3, nudge_x = -0.00015,  nudge_y = 0.7) +
theme_tree2() +
geom_vline(xintercept = 0.0165, linetype="dashed", size = 0.6)
p1
## function to extract a list of nodes and its tip labels from a tree
source("extract_nodes_tips.R")
## vector with your nodes
nodes <- c(146, 144, 118, 132, 134, 137, 139, 115, 83, 84, 113, 92, 97, 103, 106)
## extract a list of nodes and its tip labels from a tree
nodes_tree <- extract_nodes_tips("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20", all_nodes = FALSE, nodes = nodes)
## convert nodes to dataframe
nodes_tree$node <- factor(nodes_tree$node)
## loop to split the samples according of their nodes and put them in a list
cls_lst <- list()
for (w in 1:length(levels(nodes_tree[,2]))){
Cw <- nodes_tree %>% filter(node == levels(nodes_tree[,2])[w])
Cw <- as.vector(Cw[,1])
cls_lst[[w]] <- Cw
}
tree_1 <- read.raxml("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20")
tree_1 <- groupOTU(tree_1, cls_lst)
p1 <- ggtree(tree_1) + geom_tiplab(aes(color=group)) +
geom_text(aes(label=bootstrap/100), col = "black", size = 3, nudge_x = -0.00015,  nudge_y = 0.7) +
theme_tree2() +
geom_vline(xintercept = 0.0165, linetype="dashed", size = 0.6)
p1
cls_lst
## function to extract a list of nodes and its tip labels from a tree
source("extract_nodes_tips.R")
## vector with your nodes
nodes <- c(146, 144, 118, 132, 134, 137, 139, 115, 83, 84, 113, 92, 97, 103, 106)
## extract a list of nodes and its tip labels from a tree
nodes_tree <- extract_nodes_tips("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20", all_nodes = FALSE, nodes = nodes)
## convert nodes to dataframe
nodes_tree$node <- factor(nodes_tree$node)
## Read the file with the mammillarias name
names <- read.csv("../meta/Mamm_names.csv", header = FALSE, sep = "\t")
## loop to change the names of tips in the file nodes tree
for (i in 1:nrow(names)){
x <- names[i,1]
y <- names[i,2]
for (n in 1:nrow(nodes_tree)){
if (nodes_tree[n,1] == x){
nodes_tree[n,1] <- y
}
}
}
## loop to split the samples according of their nodes and put them in a list
cls_lst <- list()
for (w in 1:length(levels(nodes_tree[,2]))){
Cw <- nodes_tree %>% filter(node == levels(nodes_tree[,2])[w])
Cw <- as.vector(Cw[,1])
cls_lst[[w]] <- Cw
}
tree_1 <- read.raxml("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20")
names <- read.csv("../meta/Mamm_names.csv", header = FALSE, sep = "\t")
tree_1 <-  rename_taxa(tree_1, names, V1, V2)
ggtree(tree_1) + geom_tiplab() + geom_label2(aes(label = node), size = 3) + geom_rootpoint()
ggtree(tree_1) + geom_tiplab() + geom_label2(aes(label = bootstrap), size = 3) + geom_rootpoint()
tree_1 <- groupOTU(tree_1, cls_lst)
p1 <- ggtree(tree_1) + geom_tiplab(aes(color=group)) +
geom_text(aes(label=bootstrap/100), col = "black", size = 3, nudge_x = -0.00015,  nudge_y = 0.7) +
theme_tree2() +
geom_vline(xintercept = 0.0165, linetype="dashed", size = 0.6)
p1
setwd("~/Stoich_repos/GBS_Bioinf_Process_Mamm/bin")
library(ggtree)
library(ape)
library(treeio)
library(colorspace)
library(MoreTreeTools)
library(doMC)
library(dplyr)
library(ggExtra)
library(tidyr)
## function to extract a list of nodes and its tip labels from a tree
source("extract_nodes_tips.R")
## vector with your nodes
nodes <- c(146, 144, 118, 132, 134, 137, 139, 115, 83, 84, 113, 92, 97, 103, 106)
## extract a list of nodes and its tip labels from a tree
nodes_tree <- extract_nodes_tips("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20", all_nodes = FALSE, nodes = nodes)
## convert nodes to dataframe
nodes_tree$node <- factor(nodes_tree$node)
## Read the file with the mammillarias name
names <- read.csv("../meta/Mamm_names.csv", header = FALSE, sep = "\t")
## loop to change the names of tips in the file nodes tree
for (i in 1:nrow(names)){
x <- names[i,1]
y <- names[i,2]
for (n in 1:nrow(nodes_tree)){
if (nodes_tree[n,1] == x){
nodes_tree[n,1] <- y
}
}
}
## loop to split the samples according of their nodes and put them in a list
cls_lst <- list()
for (w in 1:length(levels(nodes_tree[,2]))){
Cw <- nodes_tree %>% filter(node == levels(nodes_tree[,2])[w])
Cw <- as.vector(Cw[,1])
cls_lst[[w]] <- Cw
}
tree_1 <- read.raxml("../out/tree_raxml/RAxML_bipartitionsBranchLabels.opt_89_9_20")
names <- read.csv("../meta/Mamm_names.csv", header = FALSE, sep = "\t")
tree_1 <-  rename_taxa(tree_1, names, V1, V2)
ggtree(tree_1) + geom_tiplab() + geom_label2(aes(label = node), size = 3) + geom_rootpoint()
ggtree(tree_1) + geom_tiplab() + geom_label2(aes(label = bootstrap), size = 3) + geom_rootpoint()
tree_1 <- groupOTU(tree_1, cls_lst)
p1 <- ggtree(tree_1) + geom_tiplab(aes(color=group)) +
geom_text(aes(label=bootstrap/100), col = "black", size = 3, nudge_x = -0.00015,  nudge_y = 0.7) +
theme_tree2() +
geom_vline(xintercept = 0.0169, linetype="dashed", size = 0.6)
p1
p1 <- ggtree(tree_1) + geom_tiplab(aes(color=group)) +
geom_text(aes(label=bootstrap/100), col = "black", size = 3, nudge_x = -0.00015,  nudge_y = 0.7) +
theme_tree2() +
geom_vline(xintercept = 0.0169, linetype="dashed", size = 0.6, color = "red")
p1
